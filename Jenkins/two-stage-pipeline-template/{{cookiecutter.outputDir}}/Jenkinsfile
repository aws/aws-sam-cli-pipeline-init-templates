pipeline {
  agent {
    docker { 
      image 'public.ecr.aws/sam/build-python3.8'
      args '--user 0:0'
    }
  }
  environment {
    SAM_TEMPLATE = "{{cookiecutter.sam_template}}"
    TESTING_STACK_NAME = "{{cookiecutter.testing_stack_name}}"
    TESTING_PIPELINE_EXECUTION_ROLE = "{{cookiecutter.testing_pipeline_execution_role}}"
    TESTING_CLOUDFORMATION_EXECUTION_ROLE = "{{cookiecutter.testing_cloudformation_execution_role}}"
    TESTING_ARTIFACTS_BUCKET = "{{cookiecutter.testing_artifacts_bucket}}"
    TESTING_ECR_REPO = "{{cookiecutter.testing_ecr_repo}}"
    TESTING_REGION = "{{cookiecutter.testing_region}}"
    PROD_STACK_NAME = "{{cookiecutter.prod_stack_name}}"
    PROD_PIPELINE_EXECUTION_ROLE = "{{cookiecutter.prod_pipeline_execution_role}}"
    PROD_CLOUDFORMATION_EXECUTION_ROLE = "{{cookiecutter.prod_cloudformation_execution_role}}"
    PROD_ARTIFACTS_BUCKET = "{{cookiecutter.prod_artifacts_bucket}}"
    PROD_ECR_REPO = "{{cookiecutter.prod_ecr_repo}}"
    PROD_REGION = "{{cookiecutter.prod_region}}"
  }
  stages {
    // uncomment and modify the following step for running the unit-tests
    // stage('test') {
    //   steps {
    //     // Assuming python runtime
    //     sh 'pip install pytest'
    //     sh 'pip install -r /path/to/requirements.txt'
    //     sh 'python -m pytest /path/to/unit-tests'
    //   }
    // }

    stage('build-and-deploy-test') {
      when {
        branch 'feature*'
      }
      steps {
        withAWS(credentials: '{{cookiecutter.deployer_aws_access_key_jenkins_credential_id}}', region: '{{cookiecutter.testing_region}}') {
          sh '''
            . pipeline/assume-role.sh ${TESTING_PIPELINE_EXECUTION_ROLE} testing-packaging
            sam build --template ${SAM_TEMPLATE}
            sam deploy --stack-name features-${env.BRANCH_NAME}-cfn-stack \
              --capabilities CAPABILITY_IAM \
              --region ${TESTING_REGION} \
              --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
              --image-repository ${TESTING_ECR_REPO} \
              --no-fail-on-empty-changeset \
              --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}
          '''
        }
      }
    }

    stage('build') {
      when {
        branch '{{cookiecutter.main_git_branch}}'
      }
      steps {
        sh 'sam build --template ${SAM_TEMPLATE}'
        withAWS(credentials: '{{cookiecutter.deployer_aws_access_key_jenkins_credential_id}}', region: '{{cookiecutter.testing_region}}') {
          sh '''
            . pipeline/assume-role.sh ${TESTING_PIPELINE_EXECUTION_ROLE} testing-packaging
            sam package \
              --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
              --image-repository ${TESTING_ECR_REPO} \
              --region ${TESTING_REGION} \
              --output-template-file packaged-testing.yaml
          '''
        }

        withAWS(credentials: '{{cookiecutter.deployer_aws_access_key_jenkins_credential_id}}', region: '{{cookiecutter.prod_region}}') {
          sh '''
            . pipeline/assume-role.sh ${PROD_PIPELINE_EXECUTION_ROLE} prod-packaging
            sam package \
              --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
              --image-repository ${PROD_ECR_REPO} \
              --region ${PROD_REGION} \
              --output-template-file packaged-prod.yaml
          '''
        }

        archiveArtifacts artifacts: 'packaged-testing.yaml'
        archiveArtifacts artifacts: 'packaged-prod.yaml'
      }
    }

    stage('deploy-testing') {
      when {
        branch '{{cookiecutter.main_git_branch}}'
      }
      steps {
        withAWS(credentials: '{{cookiecutter.deployer_aws_access_key_jenkins_credential_id}}', region: '{{cookiecutter.testing_region}}') {
          sh '''
            . pipeline/assume-role.sh ${TESTING_PIPELINE_EXECUTION_ROLE} testing-deployment
            sam deploy --stack-name ${TESTING_STACK_NAME} \
              --template packaged-testing.yaml \
              --capabilities CAPABILITY_IAM \
              --region ${TESTING_REGION} \
              --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
              --image-repository ${TESTING_ECR_REPO} \
              --no-fail-on-empty-changeset \
              --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}
          '''
        }
      }
    }

    // uncomment and modify the following step for running the integration-tests
    // stage('integration-test') {
    //   when {
    //     branch '{{cookiecutter.main_git_branch}}'
    //   }
    //   steps {
    //     sh '''
          
    //       # trigger the integration tests here
    //     '''
    //   }
    // }

    stage('deploy-prod') {
      when {
        branch '{{cookiecutter.main_git_branch}}'
      }
      steps {
        withAWS(credentials: '{{cookiecutter.deployer_aws_access_key_jenkins_credential_id}}', region: '{{cookiecutter.prod_region}}') {
          sh '''
            . pipeline/assume-role.sh ${PROD_PIPELINE_EXECUTION_ROLE} prod-deployment
            sam deploy --stack-name ${PROD_STACK_NAME} \
              --template packaged-prod.yaml \
              --capabilities CAPABILITY_IAM \
              --region ${PROD_REGION} \
              --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
              --image-repository ${PROD_ECR_REPO} \
              --no-fail-on-empty-changeset \
              --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}
          '''
        }
      }
    }
  }
}